(* pi.yacc *)
open DataTypes
%%
%name While
%term NEW | READ | WRITE | IF | THEN | ELSE | ENDIF | WHILE | DO | ENDWH | INT | BOOL | VAR | PROGRAM | TT | FF | START | TYPEOF | EOS | COMMA | LSPAR | RSPAR | ASSIGN | UMINUS | LPAR | RPAR | NOT | AND | LT | LEQ | EQ | GT | GEQ | NEQ | PLUS | MINUS | TIMES | DIV | MOD | OR
%nonterm program of PROG | id of string | block of BLK | decSeq of DECSEQ | cmdSeq of CMDSEQ | dec of DEC| 
%pos int
%eop EOF
%noshift EOF
%nonassoc DVBAR EOF EQUALS ILLCH INPUT
            LPAR NEW OUTPUT RPAR
%nodefault
%verbose
%keyword NEW
%arg (fileName) : string

%%
program:
PROGRAM id START block     ((PROG(id,block)))
block:
decSeq cmdSeq               ((BLK(decSeq,cmdSeq)))
decSeq:
dec decSeq                  ((dec::decSeq))
|                            ([])
dec:
VAR varList TYPEOF EOS      ((DEC(varList)))
type:
INT                         ()
|BOOL
varList:
var varList                 ((var::varList))
|                           ([])
cmdSeq:
LSPAR cmd EOS cmdSeq RSPAR   ((cmd::cmdSeq))
|  LSPAR RSPAR               ([])
cmd:
var ASSIGN exp              ((SET(var,exp)))
| READ var                  ((CMD(var)))
| WRITE intExp               ((CMD(intExp)))
| IF boolExp THEN cmdSeq1 ELSE cmdSeq2 ENDIF  ((ITE(boolExp,cmdSeq1,cmdSeq2)))
| WHILE boolExp DO cmdSeq ENDWH ((WH(boolExp,cmdSeq)))
exp:
intExp                      ((IEXP(intExp)))
| boolExp                   ((BEXP(boolExp)))
intExp:
intExp PLUS intTerm         ((PLUS(intExp,intTerm)))
| intExp MINUS intTerm         ((MINUS(intExp,intTerm)))
| intTerm                    ((intTerm))
intTerm:
intTerm TIMES intFactor     ((TIMES(intTerm,intFactor)))
| intTerm DIV intFactor     ((DIV(intTerm,intFactor)))
| intTerm MOD intFactor     ((MOD(intTerm,intFactor)))
| intFactor                  ((intFactor))
intFactor:

| var
| LPAR intExp RPAR           ((intExp))
| UMINUS intFactor           ((MINUS(0,intFactor)))
boolExp:
boolExp OR boolTerm           (())
| boolTerm                    (())
boolFactor:
TT
| FF
| var
| intExp relOP intExp
| LPAR boolExp RPAR
| NOT boolFactor
var:
id
relOP:
LT
| LEQ
| EQ
| GT
| GEQ
| NEQ
addOP:
PLUS
| MINUS
multOP:
TIMES
| 