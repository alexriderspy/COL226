(* while.yacc *)
open DataTypes
%%
%name While
%term READ | WRITE | IF | THEN | ELSE | ENDIF | WHILE | DO | ENDWH | INT | BOOL | VAR | PROGRAM | TT | FF | START | TYPEOF | EOS | COMMA | LSPAR | RSPAR | ASSIGN | UMINUS | LPAR | RPAR | NOT | AND | LT | LEQ | EQ | GT | GEQ | NEQ | PLUS | MINUS | TIMES | DIV | MOD | OR | EOF
%nonterm program of PROG | id of string | block of BLK | dec of DEC | decSeq of string | cmdSeq of string | varList of string list |  intExp of IEXP | boolExp of BEXP | intFactor of INT | intTerm of INT | boolFactor of BOOL | boolTerm of BOOL | cmd of CMD | var of string | exp of string | type of string | cmdSeq1 of string | cmdSeq2 of string
%pos int
%eop EOF
%noshift EOF
%nonassoc READ WRITE IF THEN ELSE ENDIF WHILE DO ENDWH INT BOOL VAR PROGRAM TT FF START TYPEOF EOS COMMA LSPAR RSPAR ASSIGN UMINUS LPAR RPAR NOT AND LT LEQ EQ GT GEQ NEQ PLUS MINUS TIMES DIV MOD OR EOF
%nodefault
%verbose
%keyword 
%arg (fileName) : string
%%
program:
PROGRAM id START block     ((PROG(id,block)))
block:
decSeq cmdSeq               ((BLK(decSeq,cmdSeq)))
decSeq:
dec decSeq                  ((dec::decSeq))
|                            ([])
dec:
VAR varList TYPEOF type EOS      ((DEC(varList)))
type:
INT                         ((INT))
|BOOL                       ((BOOL))
varList:
var varList                 ((var::varList))
|                           ([])
cmdSeq:
LSPAR cmd EOS cmdSeq RSPAR   ((cmd::cmdSeq))
|  LSPAR RSPAR               ([])
cmd:
var ASSIGN exp              ((SET(var,exp)))
| READ var                  ((CMD(var)))
| WRITE intExp               ((CMD(intExp)))
| IF boolExp THEN cmdSeq1 ELSE cmdSeq2 ENDIF  ((ITE(boolExp,cmdSeq1,cmdSeq2)))
| WHILE boolExp DO cmdSeq ENDWH ((WH(boolExp,cmdSeq)))
exp:
intExp                      ((IEXP(intExp)))
| boolExp                   ((BEXP(boolExp)))
intExp:
intExp PLUS intTerm         ((PLUS(intExp,intTerm)))
| intExp MINUS intTerm       ((MINUS(intExp,intTerm)))
| intTerm                    ((intTerm))
intTerm:
intTerm TIMES intFactor     ((TIMES(intTerm,intFactor)))
| intTerm DIV intFactor     ((DIV(intTerm,intFactor)))
| intTerm MOD intFactor     ((MOD(intTerm,intFactor)))
| intFactor                  ((intFactor))
intFactor:
id                          ((id))
| LPAR intExp RPAR           ((intExp))
| UMINUS intFactor           ((UMINUS(intFactor)))
boolExp:
boolExp OR boolTerm           ((OR(boolExp,boolTerm)))
| boolTerm                    ((boolTerm))
boolTerm:
boolTerm AND boolFactor       ((AND(boolTerm,boolFactor)))
| boolFactor                   ((boolFactor))
boolFactor:
TT                          ((TT))
| FF                        ((FF))
| id                        ((id))                         
| intExp LT intExp           ((LT(intExp,intExp)))   
| intExp LEQ intExp         ((LEQ(intExp,intExp)))
| intExp EQ intExp          ((EQ(intExp,intExp)))
| intExp GT intExp          ((GT(intExp,intExp)))
| intExp GEQ intExp         ((GEQ(intExp,intExp)))
| intExp NEQ intExp         ((NEQ(intExp,intExp)))
| LPAR boolExp RPAR         ((boolExp))
| NOT boolFactor            ((NOT(boolFactor)))
var:
id                          ((id))