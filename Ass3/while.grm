open AST;
%%
%name While
%term IF | THEN | ELSE | ENDIF | NUM of int | TT of bool| FF of bool|ID of string | PROGRAM | START | TYPEOF | EOS | COMMA | LSPAR | RSPAR | ASSIGN | NEGATE | LPAR | RPAR | NOT | AND | LT | LEQ | EQ | GT | GEQ | NEQ | PLUS | MINUS | TIMES | DIV | MOD | OR | EOF | ILLCH | WHILE | DO| ENDWH | READ | WRITE | VAR | INTX | BOOLX
%nonterm program of DEC list* CMD list | decSeq of DEC list | dec of DEC| cmdSeq of CMD list | cmd of CMD | varList of id list | exp of Exp  | assign of id*Exp
%pos int
%eop EOF
%noshift EOF
%nodefault
%right IF THEN ELSE ENDIF
%right WHILE DO ENDWH
%left AND OR 
%left EQ 
%left NEQ LEQ LT GEQ GT
%left PLUS MINUS
%left TIMES DIV MOD
%right NOT NEGATE
%verbose
%keyword 
%start program
%arg (fileName) : string
%%
program:
PROGRAM ID START decSeq LSPAR cmdSeq RSPAR     (decSeq,cmdSeq)
decSeq:
dec EOS decSeq    (dec::decSeq)
|       ([])
dec:
VAR varList TYPEOF INTX      (INT(varList)) 
| VAR varList TYPEOF BOOLX    (BOOL(varList))
varList:
ID COMMA varList (ID::varList)
|  ID             ([ID])
cmdSeq:
cmd EOS cmdSeq   (cmd::cmdSeq)
|          ([])
cmd:
exp (EXP(exp))
| assign (SET(assign))
| READ ID (READ(ID))
| WRITE exp (WRITE(exp))
assign:
ID ASSIGN exp   ((ID,exp))
exp:
TT   (BoolExp(TT))
| FF  (BoolExp(FF))
| NUM (NumExp(NUM))
| ID (VarExp(ID))
| NOT exp (UnExp(NOT,exp))
| exp PLUS exp         (BinExp(PLUS,exp1,exp2))
| exp MINUS exp       (BinExp(MINUS,exp1,exp2))
| exp OR exp           (BinExp(OR,exp1,exp2))
| exp TIMES exp     (BinExp(TIMES,exp1,exp2))
| exp DIV exp     (BinExp(DIV,exp1,exp2))
| exp MOD exp     (BinExp(MOD,exp1,exp2))
| exp AND exp       (BinExp(AND,exp1,exp2))
| exp LT exp           (BinExp(LT,exp1,exp2))   
| exp LEQ exp         (BinExp(LEQ,exp1,exp2))
| exp EQ exp          (BinExp(EQ,exp1,exp2))
| exp GT exp          (BinExp(GT,exp1,exp2))
| exp GEQ exp         (BinExp(GEQ,exp1,exp2))
| exp NEQ exp         (BinExp(NEQ,exp1,exp2))
| NEGATE exp        (UnExp(NEGATE,exp))
| LPAR exp RPAR         (exp)
| IF exp THEN LSPAR cmdSeq RSPAR ELSE LSPAR cmdSeq RSPAR ENDIF (ITE(exp1,cmdSeq1,cmdSeq2))
| WHILE exp DO LSPAR cmdSeq RSPAR ENDWH  (WH(exp,cmdSeq))
